<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C# on PRG &amp;
3D</title>
    <link>https://jackstreicher.github.io/PrgAnd3D/categories/c#/</link>
    <description>Recent content in C# on PRG &amp;
3D</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://jackstreicher.github.io/PrgAnd3D/categories/c#/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>01. Einführung in Blender</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/3d/01einfuehrung_blender3d/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/3d/01einfuehrung_blender3d/</guid>
      <description>Move static content to static Create your Hugo configuration file Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the Hugo configuration documentation for details.
Set your configuration publish folder to _site The default is for Jekyll to publish to _site and for Hugo to publish to public. If, like me, you have _site mapped to a git submodule on the gh-pages branch, you&amp;rsquo;ll want to do one of two alternatives:</description>
    </item>
    
    <item>
      <title>01. Objektorientierte Programmierung</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/01oop-einfuehrung/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/01oop-einfuehrung/</guid>
      <description>01 Sprachgrundlagen C#, auch C#.NET (Visual Studio) ist eine Weiterentwicklung der Programmiersprache C++, letztere wird u.a. in Game Engines, wie der Unreal Engine verwendet. Bei C# handelt es sich um eine objektorientierte Programmiersprache. Die Raute, die dem C folgt symbolisiert vier, sich überlappende, Plus-Zeichen (C++++). Die Programmiersprache wurde von Microsoft entwickelt und erschien erstmals mit Visual Studio .NET 2002.
Für Nutzer der Windows Plattform stellt(e) sie eine alternative zu Java dar.</description>
    </item>
    
    <item>
      <title>02. Grundlagen der OOP</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/02grundlagen_der_oop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/02grundlagen_der_oop/</guid>
      <description>01 Klassen, Felder &amp;amp; Methoden Die beste Definition für eine Klasse stammt bereits aus der C#-Dokumentation von Microsoft:
 Klassen sind die grundlegendsten der C#-Typen. Eine Klasse ist eine Datenstruktur, die einen Zustand (Felder) und Aktionen (Methoden und andere Funktionsmember) in einer einzigen Einheit kombiniert. Eine Klasse stellt eine Definition für dynamisch erstellte Instanzen der Klasse, auch bekannt als Objekte bereit. Klassen unterstützen Vererbung und Polymorphie. Dies sind Mechanismen, durch die abgeleitete Klassen erweitert und Basisklassen spezialisiert werden können.</description>
    </item>
    
    <item>
      <title>03. Kapselung, Konstruktoren und Namesnräume</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/03kapselung_konstruktoren_namensraeume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/03kapselung_konstruktoren_namensraeume/</guid>
      <description>01 Kapselung und Eigenschaften Wenn ein Objekt entworfen wird, muss überlegt werden, welche Member des Objekts für den Benutzer sichtbar (public) oder verborgen (private || protected) sind. Eine Kapselung besteht dann, wenn ein Member für den Benutzer nicht sichtbar ist.
Die Gründe für eine Kapselung sind, dass der Benutzer z.B. als privat deklarierte Member des Objekts nicht ändern kann, wodurch weniger Fehler durch den Benutzer entstehen können. Fehler wären in diesem Fall die Zerstörung des Codes, durch Fehleingaben oder durch Manipulation von Membern, die nicht manipuliert werden sollten.</description>
    </item>
    
    <item>
      <title>04. Vererbung</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/04vererbung/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/04vererbung/</guid>
      <description>01 Grundlagen der Vererbung Für die OOP ist Vererbung ein sehr wichtiges Konzept. Die Vererbung ermöglicht es, dass child Klassen von parent Klassen Methoden und Eigenschaften erben und erweitern können.
Auf Member mit dem Schlüsselwort protected können anderen Klassen nicht zugreifen, child Klassen jedoch haben Zugriff, insofern diese protected Member der parent Klasse angehören.
Auf private Member können von child Klassen, die in der parent Klasse eingebettet sind, zugegriffen werden. Durch das Schlüsselwort base kann auf Member der parent Instanz zugegriffen werden.</description>
    </item>
    
    <item>
      <title>05. Polymorphismus</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/05polymorphismus/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/05polymorphismus/</guid>
      <description>01 Polymorphie in der Vererbung Polymophismus bedeutet Vielgestaltigkeit. compile time Polymorphie haben wir bereits unter dem Namen Method Overload kennengelernt. Im folgenden Beispiel gehen wir näher auf die run time Polymorphie ein.
Wir arbeiten weiter an unserem Monster Beispiel und wenden Polymorphie direkt an, indem wir eine Methode der parent Klasse überschreiben (override). Als nächstes verändern wir eine Methode der parent Klasse. Um dies zu tun muss vor die Methode, in die Reihe der Schlüsselwörter das wort virtual geschrieben werden.</description>
    </item>
    
    <item>
      <title>06. Interfaces a.k.a. Schnittstellen</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/06interfaces/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/06interfaces/</guid>
      <description>01 Einführung in Schnittstellen Interfaces funktionieren im Grunde wie abstarkte Klassen. Man kann sie auch als Vertrag verstehen, der besagt: Jede Klasse die das Interface implementiert, muss alle Properties und Methoden des Interfaces implementieren. Schnittstelle oder Vererbung? Schnittstellen werden in C# häufig dazu genutzt Mehrfachvererbung (die in C# nicht möglich ist) darzustellen. Für die Entscheidung, ob ein Interface oder eine Klasse (Base Klasse) genutzt werden sollte, lässt sich generell sagen: Wenn die Baseklasse über keine implementierung verfügt und nur abstrakt ist, kann man i.</description>
    </item>
    
    <item>
      <title>07. Komplexe Datentypen</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/07komplexe_datentypen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/07komplexe_datentypen/</guid>
      <description>01 Ein-, merhdimensionale &amp;amp; verzweigte Arrays Ein Array ist eine Datenstruktur, in der Variablen des gleichen Typs gespeichert werden können. Arrays eignen sich hervorragend um mit einer feststehenden Anzahl von Objekten des gleichen Typs zu arbeiten. Vorstellen kann man sich ein eindimensionales Array als einen Schrank mit Schubladen, bei dem jede Schublade eine Nummer trägt (0-X). Sobald der Schrank erst ein Mal geschreinert wurde, kann dessen Größe und nicht ohne weiteres verändert werden!</description>
    </item>
    
    <item>
      <title>08. Fehlerbehandlung und Suche</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/08fehlerbehandlung_und_suche/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/08fehlerbehandlung_und_suche/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>09. System-, Datei- und Laufwerkzugriffe</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/09system_datei_laufwerkzugriffe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/09system_datei_laufwerkzugriffe/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>10. Mathematische Objekte und Berechnungen</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/10mathematisch_objekte_und_berechnungen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/10mathematisch_objekte_und_berechnungen/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>11. Unity: 
Perspektiven-Einstellungen View-, World- und Projektionmatrix</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/11unity3d_perspektiven-einstellungen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/11unity3d_perspektiven-einstellungen/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>12. Unity: 
Texturierung</title>
      <link>https://jackstreicher.github.io/PrgAnd3D/programming/12unity3dtexturierung/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jackstreicher.github.io/PrgAnd3D/programming/12unity3dtexturierung/</guid>
      <description> </description>
    </item>
    
  </channel>
</rss>